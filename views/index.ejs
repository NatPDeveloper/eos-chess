<% include ./partials/header %>

<div  align="center" class="container" id="main"> 

    <div class="row">
        <div class="col-6">
            <h1>Welcome to ChessEOS</h1>
            <div id="board" style="width: 600px"></div>
            <!-- <p>FEN: <span id="fen"></span></p>
            <p>PGN: <span id="pgn"></span></p>
            <input type="button" id="getPositionBtn" value="Show position in console" /> -->
        </div>
        <div id="move" class="col-6">
            <h3><span id="status"></span></h3>
            <form id="nameForm" method="">
                <div class="form-group">
                    <input class="form-control" id="eosName" type="text" name="name" placeholder="enter your EOS account name">
                    <button id="submitButton" class="btn btn-lg btn-primary btn-block">Connect</button>
                </div>
            </form>
            <form id="hostForm" method="">
                <div class="form-group">
                    <input class="form-control" id="hostName" type="text" name="host" placeholder="enter the host's EOS account name">
                    <button id="submitButton" class="btn btn-lg btn-primary btn-block">Connect</button>
                </div>
            </form>
            <h4>MOVES</h4>
            <div id="moves">
                <% moves.forEach(function(move){ %>
                    <ul id="moves_ul">
                        <!-- list populated from onDrop logic -->
                    </ul>
                <% }) %>
            </div>
        </div>
    </div>

    <script>
        var game; // attach the game board and engine

        var room; // testing

        var board; // server sends opponent move to board

        // SOCKETIO LOGIC        
        socket = io();
        // var room = "default";
        // socket.on('connect', function() {
        //     // Connected, let's sign-up for to receive messages for this room
        //     socket.emit('room', room);
        // });

        
        // submits room value from EOS account name box
        document.querySelector('#nameForm').addEventListener('submit', function (e) {
            // e.preventDefault();
            // var formInput = document.querySelector('#eosName');
            // console.log(formInput.value);
            // socket.emit('newRoom',formInput.value);
            // TESTING
            e.preventDefault();
            var formInput = document.querySelector('#eosName');
            socket.emit("sendName",formInput.value);
            console.log(formInput.value);
            // name.text(formInput.val());
            // formInput.val('');
            // formInput.hide();
            return false;
        });
        
        socket.on('roomId',function(roomId){
            room = roomId;
            console.log("set room to roomId " + room);
            //showRoomId.text('Room ID : ' + room);
        })

        socket.on('sendMessage',function(message){
            console.log("hit send message" + message);
            // var h1 = $('<h1/>').append($('<p/>',{
            //     text:message,
            //     class:"message sender-message"
            // }))
            // messages.append(h1);
        })

        socket.on("joinRequestFrom",function(socketId){
        console.log("join request from " + socketId);
         var confirm = window.confirm("Join Request, Do you accept?");
            if(confirm){
                socket.emit("joinRequestAnswer","yes",socketId);
                board.orientation('white');
                board.start();
            }
        })
        socket.on("newGameRequest",function(){
            var confirm = window.confirm("You won! Opponent want to reset the game");
            if(confirm){
                socket.emit("newGame",room);
            }
        })
        socket.on("newGame",function(){
            board.start();
            socket.emit("newGameRequest",room);
        })
        socket.on("joinRoom",function(newRoom,host){
            window.alert("Joined room " + host);
            room = newRoom;
            socket.emit("joinRoom",room);
            board.orientation('black');
            board.start();
        });

        // submits room value from EOS account name box
        document.querySelector('#hostForm').addEventListener('submit', function (e) {
            
            e.preventDefault();
            if(room)
                socket.emit("joinRequestTo",hostName.value);
            else{
                alert("You did not have a name");
            }

        });

        socket.on('move',function(moveData){
            game.move(moveData)
            board.position(game.fen());
            // ADDS LI TO MOVES LIST AFTER DROP EVENT
            var list = document.getElementById('moves');
            var entry = document.createElement('li');
            // entry.className = 'playerMoves';  #NOT DRY
            entry.setAttribute("class", "playerMoves");
            entry.className = "playerMoves";
            entry.appendChild(document.createTextNode(moveData.piece + " " + moveData.from + " to " + moveData.to));
            list.prepend(entry);
            updateStatus();            
        })

        socket.on('opponentDisconnect',function(){
            alert("Opponent left the room");
            board.orientation('white');
            board.start();
        })
        
        var board,
            game = new Chess(),
            statusEl = $('#status'),
            fenEl = $('#fen'),
            pgnEl = $('#pgn');
        // do not pick up pieces if the game is over
        // only pick up pieces for the side to move
        var onDragStart = function(source, piece, position, orientation) {
            if (game.game_over() === true ||
                (game.turn() === 'w' && piece.search(/^b/) !== -1) ||
                (game.turn() === 'b' && piece.search(/^w/) !== -1)) {
            return false;
            }
        };
        var onDrop = function(source, target) {
            // see if the move is legal
            var move = game.move({
                from: source,
                to: target,
                promotion: 'q' // NOTE: always promote to a queen for example simplicity
            });
            // illegal move
            if (move === null){
                return 'snapback';
            } else {
                //Client sends a "move" message with move data    
                socket.emit("move",room,move);
            }
            updateStatus();
            
            // ADDS LI TO MOVES LIST AFTER DROP EVENT #NOT DRY
            var list = document.getElementById('moves');
            var entry = document.createElement('li');
            entry.setAttribute("class", "playerMoves");
            entry.appendChild(document.createTextNode(move.piece + " " + move.from + " to " + move.to));
            list.prepend(entry);
        };
        // update the board position after the piece snap 
        // for castling, en passant, pawn promotion
        var onSnapEnd = function() {
            board.position(game.fen());
        };
        var updateStatus = function() {
            var status = '';
            var moveColor = 'White';
            document.querySelector("h3").style.backgroundColor = "white";
            document.querySelector("h3").style.color = "black";
            if (game.turn() === 'b') {
                moveColor = 'Black';
                document.querySelector("h3").style.backgroundColor = "black";
                document.querySelector("h3").style.color = "white";
            }
            // checkmate?
            if (game.in_checkmate() === true) {
                status = 'Game over, ' + moveColor + ' is in checkmate.';
            }
            // draw?
            else if (game.in_draw() === true) {
                status = 'Game over, drawn position';
            }
            // game still on
            else {
            status = moveColor + ' to move';
            // check?
            if (game.in_check() === true) {
                status += ', ' + moveColor + ' is in check';
            }
            }
            statusEl.html(status);
            fenEl.html(game.fen());
            pgnEl.html(game.pgn());
        };
        var cfg = {
            draggable: true,
            position: 'start',
            onDragStart: onDragStart,
            onDrop: onDrop,
            onSnapEnd: onSnapEnd
        };
        board = ChessBoard('board', cfg);
        function clickGetPositionBtn() {
            console.log("Current position as an Object:");
            console.log(board.position());
            console.log("Current position as a FEN string:");
            console.log(board.fen());
        }
        $('#getPositionBtn').on('click', clickGetPositionBtn);
        updateStatus();
    </script>
</div>

<% include ./partials/footer %>